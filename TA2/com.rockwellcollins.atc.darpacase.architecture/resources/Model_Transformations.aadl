package Model_Transformations
public
	
	with CASE;
	
	annex Resolute {**
		
		---------------------------
		-- MODEL TRANSFORMATIONS --
		---------------------------
		
		-- Top-level claim for proper insertion of a filter
		add_filter(c : component, message_type : data) <=
		** "Filter inserted before " c **
		filter_exists(c) and not_bypassed(c, message_type) and filter_prop_checked()
		
		-- Top-level claim for proper insertion of a router
		add_router(c : component) <=
		** "Router inserted after " c **
		true
	
		-- Top-level claim for proper insertion of a monitor
		add_monitor(c : component) <=
		** "Monitor inserted on " c **
		true
		
		-- Top-level claim for proper insertion of an isolator
		add_isolator(c : component) <=
		** "Isolator added to " c **
		true
		
		-- Top-level claim for proper insertion of remote attestation
		add_remote_attestation(c : component) <=
		** "Remote Attestation added at " c **
		true
		
		
		----------------
		-- SUB CLAIMS --
		----------------
		
		
		-- Ideally, we want to check that there's a filter anywhere between
		-- pairs of components (such as the ground station and flight planner).
		-- However, there's a bug in Resolute that prevents us from doing that.
		-- So for now, we just check to see if there is a filter immediately before 
		-- the component on the communication pathway.
		filter_exists(c : component) <=
			** "A filter exists on the communication pathway immediately before " c **
			-- get incoming connections
			let in_conns : {connection} = {conn for (conn : connections(c)) | destination_component(conn) = c};
			exists(conn : in_conns). is_filter(source_component(conn))
	
		-- Make sure there is no communication pathway that avoids the filter
	    not_bypassed(c : component, message_type : data) <=
		    ** "Filter cannot be bypassed" **
			-- get incoming connections of type Command
			let cmd_conns : {connection} = {conn for (conn : connections(c)) | 
											destination_component(conn) = c and has_type(conn) and type(conn) = message_type};
			-- show that all of these connections come from a filter
			forall(conn : cmd_conns). is_filter(source_component(conn))
	
	    -- This should connect to some evidence that the filter was correctly generated
	    -- and that the proof was emitted and checked.
	    -- However, this funcionality has not yet been implemented
	    filter_prop_checked() <=
		    ** "Filter property implemented by CakeML" **
		    forall (c : component). is_filter(c)
		       => has_property(c, CASE::COMP_IMPL) and property(c, CASE::COMP_IMPL) = "CAKEML"
		       and filter_proof_checked()
		       
		-- Checks if the specified component is a filter
		is_filter(c : component) : bool =
			has_property(c, CASE::COMP_TYPE) and property(c, CASE::COMP_TYPE) = "FILTER"
			
		-- Checks that a proof has been generated showing the filter regular expression
		-- matches the AGREE contract
		filter_proof_checked() : bool =
			analysis("ToolCheck", "SPLAT")
	
	**};
	
end Model_Transformations;