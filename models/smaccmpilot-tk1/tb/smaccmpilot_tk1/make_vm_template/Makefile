############################################################################
#
#   ***AUTOGENERATED CODE (modify if you need to :-) ***
#
# TODO: add DARPA license?
#
# This file is an automatically generated makefile from the AADL build
# system designed for the CAmkES build system.  It will work for projects
# in which all C files and libraries are "known" to the AADL file.
# However, for projects with more complex dependencies and "external"
# components that are not described in the AADL file, it will need to be
# extended.
#
# This Makefile is designed for use with the Camkes distribution supporting
# linux VMs.  It does not require that the project to be built actually contains VMs.
#
# The directory containing this file should be placed under the projects/vm/apps
# directory, and a symbolic link to this directory should be created from the
# apps directory.
# So, for example, for project sel4_cpu, we would have the 'top-level' directory located here:
#    camkes-cross-vm-12_22_2016/projects/vm/apps/sel4_cpu
# and a link from the apps directory:
#    camkes-cross-vm-12_22_2016/apps/sel4_cpu
# created using (say)
# mike@mike-VirtualBox:~/Downloads/camkes-cross-vm-12_22_2016/apps$ ln -s ../projects/vm/apps/sel4_cpu sel4_cpu
#
# It is expected that the directory structure for the VM application will
# match the directory structure from other VM applications (this can be
# accomplished most easily by copying the directory structure from another VM application)
#
# The required directory structure for the app directory should be as follows:
# rwxrwxrwx 1 mike mike   12 Dec 22 12:32 common -> ../../common (mapped by you)
# drwxrwxrwx 4 mike mike 4096 Dec 12 08:11 components            (generated by TB)
# drwxrwxr-x 2 mike mike 4096 Dec 22 11:49 configurations        (needs to be provided by you!  Contains information about file system image)
# lrwxrwxrwx 1 mike mike   37 Dec 22 12:32 global-templates -> ../../../global-components/templates/   (mapped by you)
# drwxrwxrwx 2 mike mike 4096 Dec 12 08:11 include               (generated by TB)
# drwxrwxrwx 2 mike mike 4096 Dec 12 08:11 interfaces            (generated by TB)
# -rwxrwxrwx 1 mike mike  328 Dec 18 18:00 Kbuild                (copied from make_template directory)
# -rwxrwxrwx 1 mike mike  315 Dec 19 16:03 Kconfig               (copied from make_template directory)
# lrwxrwxrwx 1 mike mike   12 Dec 22 12:32 linux -> ../../linux/ (mapped by you)
# -rwxrwxrwx 1 mike mike 4839 Dec 22 12:10 Makefile              (this file - copied in by you from make_template/VM_Makefile)
# -rwxrwxrwx 1 mike mike 4608 Dec 22 14:28 your_app_name.camkes  (app-specific name generated by TB)
# drwxrwxr-x 2 mike mike 4096 Dec 13 22:33 src                   (generated by TB)
# lrwxrwxrwx 1 mike mike   16 Dec 22 12:32 templates -> ../../templates/ (mapped by you)
#
# The configurations directory must contain a file that is <appname>.h, so in
# the case of this example, sel4_cpu.h.  This file must contain configuration information
# related to the VMs and file system.  Here is an example:
#
# #define VM_NUM_GUESTS 1
#
# /* All our guests use the same kernel image, rootfs and cmdline */
# #define C162_KERNEL_IMAGE "bzimage"
# #define C162_ROOTFS "rootfs.cpio"
# #define VM_GUEST_CMDLINE "earlyprintk=ttyS0,115200 console=ttyS0,115200 root=/dev/mem i8042.nokbd=y i8042.nomux=y i8042.noaux=y io_delay=udelay noisapnp pci=nomsi"
# #
# Because of some vagaries of the linux file system and make, it is not possible to
# just construct paths either from the symbolically linked locations
#
# We are working with Data61 to simplify this process!
#
#
############################################################################
TARGETS := $(notdir ${SOURCE_DIR}).cdl
ADL := smaccmpilot_tk1_assembly.camkes

# For time server: subdirectory containing extra templates.
TEMPLATES := templates global-templates

VM_CONFIG := smaccmpilot_tk1
VM_NUM_VM := 0

include SerialServer/SerialServer.mk
include RTC/RTC.mk
include Ethdriver/Ethdriver.mk
include UDPServer/UDPServer.mk
include Vchan/Vchan.mk
include PCIConfigIO/PCIConfigIO.mk
include FileServer/FileServer.mk
include Init/Init.mk

# MWW TODO: Fill in time server component HERE.  Need to determine time server for Intel platforms.


Clock_Driver_CFILES +=  \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Clock_Driver/src/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Clock_Driver/src/plat/${PLAT}/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Clock_Driver/src/arch/${ARCH}/*.c))

Clock_Driver_HFILES += \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Clock_Driver/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/shared_include/cross_vm_shared/*.h))

Clock_Driver_ASMFILES += \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Clock_Driver/crt/arch-${ARCH}/crt0.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Clock_Driver/src/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Clock_Driver/src/arch/${ARCH}/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Clock_Driver/src/plat/${PLAT}/*.S))

GPIO_Driver_CFILES +=  \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/GPIO_Driver/src/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/GPIO_Driver/src/plat/${PLAT}/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/GPIO_Driver/src/arch/${ARCH}/*.c))

GPIO_Driver_HFILES += \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/GPIO_Driver/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/shared_include/cross_vm_shared/*.h))

GPIO_Driver_ASMFILES += \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/GPIO_Driver/crt/arch-${ARCH}/crt0.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/GPIO_Driver/src/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/GPIO_Driver/src/arch/${ARCH}/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/GPIO_Driver/src/plat/${PLAT}/*.S))

UART_Driver_CFILES +=  \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/UART_Driver/src/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/UART_Driver/src/plat/${PLAT}/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/UART_Driver/src/arch/${ARCH}/*.c))

UART_Driver_HFILES += \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/UART_Driver/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/shared_include/cross_vm_shared/*.h))

UART_Driver_ASMFILES += \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/UART_Driver/crt/arch-${ARCH}/crt0.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/UART_Driver/src/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/UART_Driver/src/arch/${ARCH}/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/UART_Driver/src/plat/${PLAT}/*.S))

Decrypt_CFILES +=  \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Decrypt/src/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Decrypt/src/plat/${PLAT}/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Decrypt/src/arch/${ARCH}/*.c))

Decrypt_HFILES += \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Decrypt/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/shared_include/cross_vm_shared/*.h))

Decrypt_ASMFILES += \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Decrypt/crt/arch-${ARCH}/crt0.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Decrypt/src/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Decrypt/src/arch/${ARCH}/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Decrypt/src/plat/${PLAT}/*.S))

Encrypt_CFILES +=  \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Encrypt/src/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Encrypt/src/plat/${PLAT}/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Encrypt/src/arch/${ARCH}/*.c))

Encrypt_HFILES += \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Encrypt/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/shared_include/cross_vm_shared/*.h))

Encrypt_ASMFILES += \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Encrypt/crt/arch-${ARCH}/crt0.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Encrypt/src/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Encrypt/src/arch/${ARCH}/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Encrypt/src/plat/${PLAT}/*.S))

Server_CFILES +=  \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Server/src/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Server/src/plat/${PLAT}/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Server/src/arch/${ARCH}/*.c))

Server_HFILES += \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Server/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/shared_include/cross_vm_shared/*.h))

Server_ASMFILES += \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Server/crt/arch-${ARCH}/crt0.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Server/src/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Server/src/arch/${ARCH}/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Server/src/plat/${PLAT}/*.S))

CAN_Framing_CFILES +=  \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/CAN_Framing/src/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/CAN_Framing/src/plat/${PLAT}/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/CAN_Framing/src/arch/${ARCH}/*.c))

CAN_Framing_HFILES += \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/CAN_Framing/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/shared_include/cross_vm_shared/*.h))

CAN_Framing_ASMFILES += \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/CAN_Framing/crt/arch-${ARCH}/crt0.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/CAN_Framing/src/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/CAN_Framing/src/arch/${ARCH}/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/CAN_Framing/src/plat/${PLAT}/*.S))

CAN_Driver_CFILES +=  \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/CAN_Driver/src/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/CAN_Driver/src/plat/${PLAT}/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/CAN_Driver/src/arch/${ARCH}/*.c))

CAN_Driver_HFILES += \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/CAN_Driver/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/shared_include/cross_vm_shared/*.h))

CAN_Driver_ASMFILES += \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/CAN_Driver/crt/arch-${ARCH}/crt0.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/CAN_Driver/src/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/CAN_Driver/src/arch/${ARCH}/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/CAN_Driver/src/plat/${PLAT}/*.S))

Virtual_Machine_CFILES +=  \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Virtual_Machine/src/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Virtual_Machine/src/plat/${PLAT}/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Virtual_Machine/src/arch/${ARCH}/*.c))

Virtual_Machine_HFILES += \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Virtual_Machine/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/shared_include/cross_vm_shared/*.h))

Virtual_Machine_ASMFILES += \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Virtual_Machine/crt/arch-${ARCH}/crt0.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Virtual_Machine/src/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Virtual_Machine/src/arch/${ARCH}/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/Virtual_Machine/src/plat/${PLAT}/*.S))


dispatch_periodic_CFILES +=  \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/dispatch_periodic/src/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/dispatch_periodic/src/plat/${PLAT}/*.c)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/dispatch_periodic/src/arch/${ARCH}/*.c))

dispatch_periodic_HFILES += \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/dispatch_periodic/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/include/*.h)) \
   $(patsubst ${SOURCE_DIR}/%,%,$(wildcard $(SOURCE_DIR)/common/shared_include/cross_vm_shared/*.h))

dispatch_periodic_ASMFILES += \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/dispatch_periodic/crt/arch-${ARCH}/crt0.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/dispatch_periodic/src/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/dispatch_periodic/src/arch/${ARCH}/*.S)) \
    $(patsubst ${SOURCE_DIR}/%,%,$(wildcard ${SOURCE_DIR}/components/dispatch_periodic/src/plat/${PLAT}/*.S))



# We want to run C99
CFLAGS += -std=gnu99 "-DCAMKES_VM_CONFIG=${VM_CONFIG}" -I${SOURCE_DIR}/configurations -I${SOURCE_DIR}/../../components/VM/configurations

CAMKES_FLAGS += --cpp-flag=-I${SOURCE_DIR}/configurations --cpp-flag=-I${SOURCE_DIR}/../../components/VM --cpp-flag="-DCAMKES_VM_CONFIG=${VM_CONFIG}" --cache-dir=${PWD}/build/camkes_cache

include ${PWD}/tools/camkes/camkes.mk

KERNEL_FILENAME := bzimage
ROOTFS_FILENAME := rootfs.cpio

ARCHIVE_DEPS := ${STAGE_DIR}/${KERNEL_FILENAME} ${STAGE_DIR}/${ROOTFS_FILENAME}

${STAGE_DIR}/${KERNEL_FILENAME}: $(SOURCE_DIR)/linux/${KERNEL_FILENAME}
	@echo "[EXTRACT-VMLINUX] $@"
	$(Q)mkdir -p $(@D)
	${PWD}/tools/elf/extract-vmlinux $< > $@

${STAGE_DIR}/${ROOTFS_FILENAME}: ${SOURCE_DIR}/linux/${ROOTFS_FILENAME}
	@echo "[CP] $@"
	@cp $< $@

${BUILD_DIR}/src/fserv/static/archive.o: ${ARCHIVE_DEPS}
	$(Q)mkdir -p $(dir $@)
	@echo "[CPIO] $@"
	$(Q)${COMMON_PATH}/files_to_obj.sh $@ _cpio_archive $^
	@echo "[CPIO] done."


