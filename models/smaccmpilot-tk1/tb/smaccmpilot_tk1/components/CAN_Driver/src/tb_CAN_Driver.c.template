/**************************************************************************
  Copyright (c) 2013-2016 Rockwell Collins and the University of
  Minnesota. Developed with the sponsorship of the Defense Advanced
  Research Projects Agency (DARPA).

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this data, including any software or models
  in source or binary form, as well as any drawings,
  specifications, and documentation (collectively "the Data"), to
  deal in the Data without restriction, including without
  limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Data, and to
  permit persons to whom the Data is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Data.

  THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS, SPONSORS,
  DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE
  DATA.
 **************************************************************************/

/**************************************************************************

  ***AUTOGENERATED CODE: DO NOT MODIFY***

This C file contains the implementations of the AADL primitives
used by user-level declarations for thread CAN_Driver.

The user code runs in terms of "dispatchers", which cause
dispatch user-level handlers to execute.  These handlers can
communicate using the standard AADL primitives, which are mapped
to C functions.

The send/receive handlers are not thread safe in CAmkES; it is
assumed that this is handled by the CAmkES sequentialized access
to the dispatch handler.  There is only one dispatch interface
for the component containing all of the dispatch points.

They are thread safe for eChronos.

The read/write handlers are thread safe because the writer comes
through a dispatch interface but the reader is "local" on a dispatch
interface and so contention may occur.

 **************************************************************************/

#include "tb_CAN_Driver.h"
#include <string.h>
#include <camkes.h>

/************************************************************************
 *  tb_self2framing_status_enqueue:
 * Invoked from user code in the local thread.
 *
 * This is the function invoked by the local thread to make a
 * call to write to a remote data port.
 *
 * XXX: When simulating fan out, the caller of this function will only 
 * receive a positive response when all enqueues are successful. When a
 * negative response is received it only indicates that at least one
 * enqueue attempt failed.
 *
 ************************************************************************/
bool tb_self2framing_status_enqueue
(const bool * tb_self2framing_status) {
    bool tb_result = true ; 

    tb_result &= tb_self2framing_status0_enqueue((bool *)tb_self2framing_status);

    return tb_result;
}
/************************************************************************
 *  tb_self2framing_frame_enqueue:
 * Invoked from user code in the local thread.
 *
 * This is the function invoked by the local thread to make a
 * call to write to a remote data port.
 *
 * XXX: When simulating fan out, the caller of this function will only 
 * receive a positive response when all enqueues are successful. When a
 * negative response is received it only indicates that at least one
 * enqueue attempt failed.
 *
 ************************************************************************/
bool tb_self2framing_frame_enqueue
(const SMACCM_DATA__CAN_Frame_i * tb_self2framing_frame) {
    bool tb_result = true ; 

    tb_result &= tb_self2framing_frame0_enqueue((SMACCM_DATA__CAN_Frame_i *)tb_self2framing_frame);

    return tb_result;
}
/************************************************************************
 *
 * Static variables and queue management functions for event port:
 *     CAN1Int
 *
 ************************************************************************/

static bool CAN1Int_index = false;

/************************************************************************
 *  CAN1Int_callback:
 * Invoked by: remote RPC
 *
 * This is the function invoked by a remote RPC to write to an active-thread
 * input event port.  It increments a count of received messages.
 *
 ************************************************************************/

bool CAN1Int_callback(void *_ UNUSED) {
    CAN1Int_index = true;
    CALLBACKOP(CAN1Int_reg_callback(CAN1Int_callback, NULL));
    return true;
}

/************************************************************************
 *  tb_CAN_Driver_read_CAN1Int:
 * Invoked from local active thread.
 *
 * This is the function invoked by the active thread to decrement the
 * input event index.
 *
 ************************************************************************/

bool tb_CAN_Driver_read_CAN1Int() {
    bool result;
    result = CAN1Int_index;
    CAN1Int_index = false;
    return result;
}
/************************************************************************
 *  tb_CAN_Driver_write_CANIntAck:
 * Invoked from user code in the local thread.
 *
 * This is the function invoked by the local thread to make a
 * call to write to a remote data port.
 *
 ************************************************************************/

bool tb_CAN_Driver_write_CANIntAck(void) {
    bool tb_result = true ; 

    CANIntAck_emit();
    return tb_result;
}


void pre_init(void) {

    // Pre-initialization statements for tb_framing2self
    // Pre-initialization statements for CAN1Int

}

/************************************************************************
 *  tb_entrypoint_tb_CAN_Driver_framing2self:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_CAN_Driver_framing2self(const SMACCM_DATA__CAN_Frame_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_CAN_Driver_CAN1Int:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_CAN_Driver_CAN1Int(void) {
}


////////////////////////////////////////////////////////////////////////////
//
// NOTE: External thread, so we assume the run function is externally declared.
//
////////////////////////////////////////////////////////////////////////////

