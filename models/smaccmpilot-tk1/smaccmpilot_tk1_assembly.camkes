/**************************************************************************
  Copyright (c) 2013-2016 Rockwell Collins and the University of
  Minnesota. Developed with the sponsorship of the Defense Advanced
  Research Projects Agency (DARPA).

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this data, including any software or models
  in source or binary form, as well as any drawings,
  specifications, and documentation (collectively "the Data"), to
  deal in the Data without restriction, including without
  limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Data, and to
  permit persons to whom the Data is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Data.

  THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS, SPONSORS,
  DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE
  DATA.
 **************************************************************************/

/**************************************************************************

  ***AUTOGENERATED CODE: DO NOT MODIFY***

This file contains the main CAmkES assembly for the
AADL system instance rooted at smaccmpilot_tk1.

 **************************************************************************/

import <std_connector.camkes>;

#include <autoconf.h>
#define TB_MONITOR_READ_ACCESS 111
#define TB_MONITOR_WRITE_ACCESS 222

import "components/dispatch_periodic/dispatch_periodic.camkes";
import <Timer.idl4>;
import <TimeServerTK1/TimeServer.camkes>;

import "components/Clock_Driver/Clock_Driver.camkes";
import "components/GPIO_Driver/GPIO_Driver.camkes";
import "components/UART_Driver/UART_Driver.camkes";
import "components/tb_Monitors/tb_UART_Driver_encrypt2self_Monitor/tb_UART_Driver_encrypt2self_Monitor.camkes";

import "components/Decrypt/Decrypt.camkes";
import "components/tb_Monitors/tb_Decrypt_uart2self_Monitor/tb_Decrypt_uart2self_Monitor.camkes";

import "components/Encrypt/Encrypt.camkes";
import "components/tb_Monitors/tb_Encrypt_server2self_Monitor/tb_Encrypt_server2self_Monitor.camkes";
import "components/tb_Monitors/tb_Encrypt_uart2self_Monitor/tb_Encrypt_uart2self_Monitor.camkes";

import "components/Server/Server.camkes";
import "components/tb_Monitors/tb_Server_vm2self_Monitor/tb_Server_vm2self_Monitor.camkes";
import "components/tb_Monitors/tb_Server_decrypt2self_Monitor/tb_Server_decrypt2self_Monitor.camkes";
import "components/tb_Monitors/tb_Server_framing2self_Monitor/tb_Server_framing2self_Monitor.camkes";

import "components/CAN_Framing/CAN_Framing.camkes";
import "components/tb_Monitors/tb_CAN_Framing_server2self_Monitor/tb_CAN_Framing_server2self_Monitor.camkes";
import "components/tb_Monitors/tb_CAN_Framing_can2self_frame_Monitor/tb_CAN_Framing_can2self_frame_Monitor.camkes";
import "components/tb_Monitors/tb_CAN_Framing_can2self_status_Monitor/tb_CAN_Framing_can2self_status_Monitor.camkes";

import "components/CAN_Driver/CAN_Driver.camkes";
import "components/tb_Monitors/tb_CAN_Driver_framing2self_Monitor/tb_CAN_Driver_framing2self_Monitor.camkes";

import "components/Virtual_Machine/Virtual_Machine.camkes";
import "components/tb_Monitors/tb_Virtual_Machine_server2self_reboot_Monitor/tb_Virtual_Machine_server2self_reboot_Monitor.camkes";




// 12/12 MWW modified for CaMKes-next
connector seL4RPCCallDataport {
    from Procedure template "seL4RPCCallDataport-from.template.c";
    to Procedure template "seL4RPCCallDataport-to.template.c";
}

assembly {
    composition {
        component dispatch_periodic dispatch_periodic_inst;

        component TimeServerTK1 time_server;
        // Component instances for all AADL-defined threads

        component Clock_Driver Clock_Driver_inst;
        component GPIO_Driver GPIO_Driver_inst;
        component UART_Driver UART_Driver_inst;
        component Decrypt Decrypt_inst;
        component Encrypt Encrypt_inst;
        component Server Server_inst;
        component CAN_Framing CAN_Framing_inst;
        component CAN_Driver CAN_Driver_inst;
        component Virtual_Machine Virtual_Machine_inst;



        // Port declarations for active threads

        connection seL4Notification conn1 (from GPIO_Driver_inst.CAN1Int, to CAN_Driver_inst.CAN1Int);


        component tb_UART_Driver_encrypt2self_Monitor tb_uart_driver_encrypt2self_monitor;

        connection seL4TimeServer tb_Decrypt_periodic_dispatcher_timer(from Decrypt_inst.tb_timer, to time_server.the_timer);
        connection seL4Notification tb_Decrypt_periodic_dispatcher_echo_int(from dispatch_periodic_inst.Decrypt_periodic_dispatcher, to Decrypt_inst.tb_timer_complete);

        component tb_Decrypt_uart2self_Monitor tb_decrypt_uart2self_monitor;

        connection seL4TimeServer tb_Encrypt_periodic_dispatcher_timer(from Encrypt_inst.tb_timer, to time_server.the_timer);
        connection seL4Notification tb_Encrypt_periodic_dispatcher_echo_int(from dispatch_periodic_inst.Encrypt_periodic_dispatcher, to Encrypt_inst.tb_timer_complete);

        component tb_Encrypt_server2self_Monitor tb_encrypt_server2self_monitor;

        component tb_Encrypt_uart2self_Monitor tb_encrypt_uart2self_monitor;

        connection seL4TimeServer tb_Server_periodic_dispatcher_timer(from Server_inst.tb_timer, to time_server.the_timer);
        connection seL4Notification tb_Server_periodic_dispatcher_echo_int(from dispatch_periodic_inst.Server_periodic_dispatcher, to Server_inst.tb_timer_complete);

        component tb_Server_vm2self_Monitor tb_server_vm2self_monitor;

        component tb_Server_decrypt2self_Monitor tb_server_decrypt2self_monitor;

        component tb_Server_framing2self_Monitor tb_server_framing2self_monitor;

        connection seL4TimeServer tb_CAN_Framing_periodic_dispatcher_timer(from CAN_Framing_inst.tb_timer, to time_server.the_timer);
        connection seL4Notification tb_CAN_Framing_periodic_dispatcher_echo_int(from dispatch_periodic_inst.CAN_Framing_periodic_dispatcher, to CAN_Framing_inst.tb_timer_complete);

        component tb_CAN_Framing_server2self_Monitor tb_can_framing_server2self_monitor;

        component tb_CAN_Framing_can2self_frame_Monitor tb_can_framing_can2self_frame_monitor;

        component tb_CAN_Framing_can2self_status_Monitor tb_can_framing_can2self_status_monitor;

        component tb_CAN_Driver_framing2self_Monitor tb_can_driver_framing2self_monitor;

        connection seL4Notification conn2 (from CAN_Driver_inst.CANIntAck, to GPIO_Driver_inst.CANIntAck);


        component tb_Virtual_Machine_server2self_reboot_Monitor tb_virtual_machine_server2self_reboot_monitor;




        // Port connections for active threads

        connection seL4RPCCall conn3 (from UART_Driver_inst.tb_self2decrypt0, to tb_decrypt_uart2self_monitor.mon);

        connection seL4RPCCall conn4 (from UART_Driver_inst.tb_encrypt2self, to tb_uart_driver_encrypt2self_monitor.mon);
        connection seL4Notification conn5 (from tb_uart_driver_encrypt2self_monitor.monsig, to UART_Driver_inst.tb_encrypt2self_notification);

        connection seL4RPCCall conn6 (from UART_Driver_inst.tb_self2encrypt0, to tb_encrypt_uart2self_monitor.mon);


        connection seL4RPCCall conn7 (from Decrypt_inst.tb_uart2self, to tb_decrypt_uart2self_monitor.mon);
        connection seL4Notification conn8 (from tb_decrypt_uart2self_monitor.monsig, to Decrypt_inst.tb_uart2self_notification);

        connection seL4RPCCall conn9 (from Decrypt_inst.tb_self2server0, to tb_server_decrypt2self_monitor.mon);


        connection seL4RPCCall conn10 (from Encrypt_inst.tb_server2self, to tb_encrypt_server2self_monitor.mon);
        connection seL4Notification conn11 (from tb_encrypt_server2self_monitor.monsig, to Encrypt_inst.tb_server2self_notification);

        connection seL4RPCCall conn12 (from Encrypt_inst.tb_self2uart0, to tb_uart_driver_encrypt2self_monitor.mon);

        connection seL4RPCCall conn13 (from Encrypt_inst.tb_uart2self, to tb_encrypt_uart2self_monitor.mon);
        connection seL4Notification conn14 (from tb_encrypt_uart2self_monitor.monsig, to Encrypt_inst.tb_uart2self_notification);


        connection seL4RPCCall conn15 (from Server_inst.tb_vm2self, to tb_server_vm2self_monitor.mon);
        connection seL4Notification conn16 (from tb_server_vm2self_monitor.monsig, to Server_inst.tb_vm2self_notification);

        connection seL4RPCCall conn17 (from Server_inst.tb_self2encrypt0, to tb_encrypt_server2self_monitor.mon);

        connection seL4RPCCall conn18 (from Server_inst.tb_decrypt2self, to tb_server_decrypt2self_monitor.mon);
        connection seL4Notification conn19 (from tb_server_decrypt2self_monitor.monsig, to Server_inst.tb_decrypt2self_notification);

        connection seL4RPCCall conn20 (from Server_inst.tb_self2framing0, to tb_can_framing_server2self_monitor.mon);

        connection seL4RPCCall conn21 (from Server_inst.tb_framing2self, to tb_server_framing2self_monitor.mon);
        connection seL4Notification conn22 (from tb_server_framing2self_monitor.monsig, to Server_inst.tb_framing2self_notification);

        connection seL4RPCCall conn23 (from Server_inst.tb_self2vm_reboot0, to tb_virtual_machine_server2self_reboot_monitor.mon);


        connection seL4RPCCall conn24 (from CAN_Framing_inst.tb_server2self, to tb_can_framing_server2self_monitor.mon);
        connection seL4Notification conn25 (from tb_can_framing_server2self_monitor.monsig, to CAN_Framing_inst.tb_server2self_notification);

        connection seL4RPCCall conn26 (from CAN_Framing_inst.tb_self2server0, to tb_server_framing2self_monitor.mon);

        connection seL4RPCCall conn27 (from CAN_Framing_inst.tb_can2self_frame, to tb_can_framing_can2self_frame_monitor.mon);
        connection seL4Notification conn28 (from tb_can_framing_can2self_frame_monitor.monsig, to CAN_Framing_inst.tb_can2self_frame_notification);

        connection seL4RPCCall conn29 (from CAN_Framing_inst.tb_can2self_status, to tb_can_framing_can2self_status_monitor.mon);
        connection seL4Notification conn30 (from tb_can_framing_can2self_status_monitor.monsig, to CAN_Framing_inst.tb_can2self_status_notification);

        connection seL4RPCCall conn31 (from CAN_Framing_inst.tb_self2can0, to tb_can_driver_framing2self_monitor.mon);

        connection seL4RPCCall conn32 (from CAN_Driver_inst.tb_framing2self, to tb_can_driver_framing2self_monitor.mon);
        connection seL4Notification conn33 (from tb_can_driver_framing2self_monitor.monsig, to CAN_Driver_inst.tb_framing2self_notification);

        connection seL4RPCCall conn34 (from CAN_Driver_inst.tb_self2framing_status0, to tb_can_framing_can2self_status_monitor.mon);

        connection seL4RPCCall conn35 (from CAN_Driver_inst.tb_self2framing_frame0, to tb_can_framing_can2self_frame_monitor.mon);

        connection seL4RPCCall conn36 (from Virtual_Machine_inst.tb_self2server0, to tb_server_vm2self_monitor.mon);

        connection seL4RPCCall conn37 (from Virtual_Machine_inst.tb_server2self_reboot, to tb_virtual_machine_server2self_reboot_monitor.mon);
        connection seL4Notification conn38 (from tb_virtual_machine_server2self_reboot_monitor.monsig, to Virtual_Machine_inst.tb_server2self_reboot_notification);



        // Direct RPC connections

        connection seL4RPCCall conn39 (from UART_Driver_inst.clkcar, to Clock_Driver_inst.clkcar);

        connection seL4RPCCall conn40 (from CAN_Driver_inst.gpio_spi_can1_cs, to GPIO_Driver_inst.gpio_spi_can1_cs);
        connection seL4RPCCall conn41 (from CAN_Driver_inst.clkcar, to Clock_Driver_inst.clkcar);

        connection seL4RPCCall conn42 (from Virtual_Machine_inst.clkcarfwd, to Clock_Driver_inst.clkcarfwd);
        connection seL4RPCCall conn43 (from Virtual_Machine_inst.uartfwd, to UART_Driver_inst.uartfwd);
        connection seL4RPCCall conn44 (from Virtual_Machine_inst.gpio_usb_vbus_en1, to GPIO_Driver_inst.gpio_usb_vbus_en1);




        connection seL4TimeServer periodic_dispatch_timer(from dispatch_periodic_inst.timer, to time_server.the_timer);
        connection seL4GlobalAsynchCallback echo_int(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);
    }

    configuration {
        dispatch_periodic_inst.timer_attributes = 10;
        dispatch_periodic_inst.timer_global_endpoint = "periodic_dispatcher_timer";
        dispatch_periodic_inst.timer_complete_global_endpoint = "periodic_dispatcher_timer";
        dispatch_periodic_inst.priority = 201;



        // Component port configuration declarations

        // GPIO_Driver_inst.CANIntAck = "GPIO_Driver_CANIntAck";
        // GPIO_Driver_inst.CANIntAck_global_endpoint = "GPIO_Driver_CANIntAck";

        UART_Driver_inst.tb_self2decrypt0_attributes = TB_MONITOR_WRITE_ACCESS;

        tb_uart_driver_encrypt2self_monitor.priority = 230;
        UART_Driver_inst.tb_encrypt2self_attributes = TB_MONITOR_READ_ACCESS;

        UART_Driver_inst.tb_self2encrypt0_attributes = TB_MONITOR_WRITE_ACCESS;


        tb_decrypt_uart2self_monitor.priority = 230;
        Decrypt_inst.tb_uart2self_attributes = TB_MONITOR_READ_ACCESS;

        Decrypt_inst.tb_self2server0_attributes = TB_MONITOR_WRITE_ACCESS;


        tb_encrypt_server2self_monitor.priority = 230;
        Encrypt_inst.tb_server2self_attributes = TB_MONITOR_READ_ACCESS;

        Encrypt_inst.tb_self2uart0_attributes = TB_MONITOR_WRITE_ACCESS;

        tb_encrypt_uart2self_monitor.priority = 230;
        Encrypt_inst.tb_uart2self_attributes = TB_MONITOR_READ_ACCESS;


        tb_server_vm2self_monitor.priority = 230;
        Server_inst.tb_vm2self_attributes = TB_MONITOR_READ_ACCESS;

        Server_inst.tb_self2encrypt0_attributes = TB_MONITOR_WRITE_ACCESS;

        tb_server_decrypt2self_monitor.priority = 230;
        Server_inst.tb_decrypt2self_attributes = TB_MONITOR_READ_ACCESS;

        Server_inst.tb_self2framing0_attributes = TB_MONITOR_WRITE_ACCESS;

        tb_server_framing2self_monitor.priority = 230;
        Server_inst.tb_framing2self_attributes = TB_MONITOR_READ_ACCESS;

        Server_inst.tb_self2vm_reboot0_attributes = TB_MONITOR_WRITE_ACCESS;


        tb_can_framing_server2self_monitor.priority = 230;
        CAN_Framing_inst.tb_server2self_attributes = TB_MONITOR_READ_ACCESS;

        CAN_Framing_inst.tb_self2server0_attributes = TB_MONITOR_WRITE_ACCESS;

        tb_can_framing_can2self_frame_monitor.priority = 230;
        CAN_Framing_inst.tb_can2self_frame_attributes = TB_MONITOR_READ_ACCESS;

        tb_can_framing_can2self_status_monitor.priority = 230;
        CAN_Framing_inst.tb_can2self_status_attributes = TB_MONITOR_READ_ACCESS;

        CAN_Framing_inst.tb_self2can0_attributes = TB_MONITOR_WRITE_ACCESS;

        tb_can_driver_framing2self_monitor.priority = 230;
        CAN_Driver_inst.tb_framing2self_attributes = TB_MONITOR_READ_ACCESS;

        CAN_Driver_inst.tb_self2framing_status0_attributes = TB_MONITOR_WRITE_ACCESS;

        CAN_Driver_inst.tb_self2framing_frame0_attributes = TB_MONITOR_WRITE_ACCESS;

        // CAN_Driver_inst.CAN1Int = "CAN_Driver_CAN1Int";
        // CAN_Driver_inst.CAN1Int_global_endpoint = "CAN_Driver_CAN1Int";

        Virtual_Machine_inst.tb_self2server0_attributes = TB_MONITOR_WRITE_ACCESS;

        tb_virtual_machine_server2self_reboot_monitor.priority = 230;
        Virtual_Machine_inst.tb_server2self_reboot_attributes = TB_MONITOR_READ_ACCESS;



        Decrypt_inst.priority = 150;
        Encrypt_inst.priority = 150;
        Server_inst.priority = 150;
        CAN_Framing_inst.priority = 150;

        Decrypt_inst._control_stack_size = 1024;
        Encrypt_inst._control_stack_size = 1024;
        Server_inst._control_stack_size = 1024;
        CAN_Framing_inst._control_stack_size = 1024;

        Decrypt_inst.tb_timer_attributes = 11;
        Decrypt_inst.tb_timer_global_endpoint = "Decrypt_tb_timer";
        Encrypt_inst.tb_timer_attributes = 12;
        Encrypt_inst.tb_timer_global_endpoint = "Encrypt_tb_timer";
        Server_inst.tb_timer_attributes = 13;
        Server_inst.tb_timer_global_endpoint = "Server_tb_timer";
        CAN_Framing_inst.tb_timer_attributes = 14;
        CAN_Framing_inst.tb_timer_global_endpoint = "CAN_Framing_tb_timer";

    }
}


