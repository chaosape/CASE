package ROUTE
public
	with CMASI;
	with Common_Data;
	with Base_Types;
	renames Common_Data::all;

	with Data_Model;

data GraphNode
end GraphNode;

--Defines a base graph node for a geo-spatial graph.
	data implementation GraphNode.i
    subcomponents
        --Unique ID for the node, used to build edges between nodes
        NodeID: data Base_Types::Integer_64;
        --Lat/Lon coordinates of node
        Coordinates: data CMASI::Location3D.i;
        --IDs of edges that have this node as an endpoint
        AssociatedEdges: data Base_Types::Integer_64 {Data_Model::Data_Representation => Array;};
end GraphNode.i;

data GraphEdge
end GraphEdge;

--Defines an edge for a geo-spatial graph. An edge must connect two
--nodes defined by GraphNodes. Each edge consists of a set of waypoints
--connecting the two endpoints. All edges are considered bi-directional
--(i.e. one-way roads are not defined)
	data implementation GraphEdge.i
    subcomponents
        --Unique ID for the edge
        EdgeID: data Base_Types::Integer_64;
        --GraphNode ID which defines the start point of the edge
        StartNode: data Base_Types::Integer_64;
        --GraphNode ID which defines the end point of the edge
        EndNode: data Base_Types::Integer_64;
        --Optional waypoints describing physical edge in lat/lon coordinates
        Waypoints: data CMASI::Location3D.i {Data_Model::Data_Representation => Array;};
end GraphEdge.i;

data GraphRegion
end GraphRegion;

--Defines a complete geo-spatial graph
	data implementation GraphRegion.i
    subcomponents
        --ID for full region data structure
        ID: data Base_Types::Integer_64;
        --List of all nodes that represent the network
        NodeList: data GraphNode.i {Data_Model::Data_Representation => Array;};
        --List of all edges that represent the network
        EdgeList: data GraphEdge.i {Data_Model::Data_Representation => Array;};
end GraphRegion.i;

data RouteConstraints
end RouteConstraints;

--Start/end points and associated heading constraints for a route
--request
	data implementation RouteConstraints.i
    subcomponents
        --ID denoting this set of route constraints
        RouteID: data Base_Types::Integer_64;
        --Location from which the planned route will start
        StartLocation: data CMASI::Location3D.i;
        --Heading of entity at the start of the route
        StartHeading: data Base_Types::Float_32;
        --If "true" the heading value in StartHeading must be used to start
        --the route. If not, any starting heading can be used.
        UseStartHeading: data Base_Types::Boolean;
        --Location to which the planned route will end
        EndLocation: data CMASI::Location3D.i;
        --Heading of entity at the end of the route
        EndHeading: data Base_Types::Float_32;
        --If "true" the heading value in EndHeading must be used to end the
        --route. If not, ant ending heading can be used.
        UseEndHeading: data Base_Types::Boolean;
end RouteConstraints.i;

data RouteRequest
end RouteRequest;

--Route request: macro route request for a list of available vehicles
	data implementation RouteRequest.i
    subcomponents
        --Request ID for correlating with response
        RequestID: data Base_Types::Integer_64;
        --Associated Task ID (0 if no associated task) for this set of
        --requests
        AssociatedTaskID: data Base_Types::Integer_64;
        --Vehicles to consider when planning. If list is empty, route planner
        --plans for all known vehicles.
        VehicleID: data Base_Types::Integer_64 {Data_Model::Data_Representation => Array;};
        -- ADDED: AWF (20170808)
        -- Number of VehicleIDs (not necessary if AGREE can get array size)                
        NumVehicleIDs: data Base_Types::Integer_64; 
        --Operating region to be considered during planning
        OperatingRegion: data Base_Types::Integer_64;
        --List of all requests for this vehicle set + operating region
        --situation
        -- AWF (20170808)
        --  The original name of "RouteRequests" was misleading as this field actually describes the
        --  route constraints that the vehicle planners must take in account. 
        RouteConstraints: data RouteConstraints.i {Data_Model::Data_Representation => Array;};       
        --Request that planner only return costs of routes rather than
        --complete waypoint plans
        IsCostOnlyRequest: data Base_Types::Boolean;
end RouteRequest.i;

data RoutePlanRequest
end RoutePlanRequest;

--Route plan request: find route from the current vehicle position to
--a point of interest or world location
	data implementation RoutePlanRequest.i
    subcomponents
        --Request ID for correlating with response
        RequestID: data Base_Types::Integer_64;
        --Associated Task ID (0 if no associated task) for this set of
        --requests
        AssociatedTaskID: data Base_Types::Integer_64;
        --Vehicle to consider when planning
        VehicleID: data Base_Types::Integer_64;
        --Operating region to be considered during planning
        OperatingRegion: data Base_Types::Integer_64;
        --List of all requests for this vehicle + operating region situation
        -- AWF (20170808)
        --  The original name of "RouteRequests" was misleading as this field actually describes the
        --  route constraints that the vehicle planners must take in account. 
        RouteConstraints: data RouteConstraints.i {Data_Model::Data_Representation => Array;};
        --Request that planner only return costs of routes rather than
        --complete waypoint plans
        IsCostOnlyRequest: data Base_Types::Boolean;
end RoutePlanRequest.i;

data RoutePlan
end RoutePlan;

--Individual route plan
	data implementation RoutePlan.i
    subcomponents
        --ID denoting this plan corresponding with requested route constraint
        --pair
        RouteID: data Base_Types::Integer_64;
        --Waypoints that connect the start location with the end location.
        --Empty if only costs were requested
        Waypoints: data CMASI::Waypoint.i {Data_Model::Data_Representation => Array;};
        --Time cost of route. If less than zero, a planning error has occurred
        RouteCost: data Base_Types::Integer_64;
        --Error messages, if applicable
        RouteError: data CMASI::KeyValuePair.i {Data_Model::Data_Representation => Array;};
end RoutePlan.i;

data RoutePlanResponse
end RoutePlanResponse;

--Route plan response: list of all fulfilled route requests
	data implementation RoutePlanResponse.i
    subcomponents
        --Response ID matching ID from request ({@link RoutePlanRequest})
        ResponseID: data Base_Types::Integer_64;
        --Associated Task ID (0 if no associated task) that this set of
        --responses corresponds to
        AssociatedTaskID: data Base_Types::Integer_64;
        --Vehicle that was considered during planning
        VehicleID: data Base_Types::Integer_64;
        --Operating region that was considered during planning
        OperatingRegion: data Base_Types::Integer_64;
        --List of all responses for this vehicle + operating region situation
        RouteResponses: data RoutePlan.i {Data_Model::Data_Representation => Array;};
end RoutePlanResponse.i;

data RouteResponse
end RouteResponse;

--Route response: list of all fulfilled route requests for a complete
--list of vehicles (see {@link RouteRequest})
	data implementation RouteResponse.i
    subcomponents
        --Response ID matching ID from request ({@link RouteRequest})
        ResponseID: data Base_Types::Integer_64;
        --Corresponding route responses for all requested vehicles
        Routes: data RoutePlanResponse.i {Data_Model::Data_Representation => Array;};
end RouteResponse.i;

data EgressRouteRequest
end EgressRouteRequest;

--Egress route request: find all egress routes (nearby intersections)
--from a point
	data implementation EgressRouteRequest.i
    subcomponents
        --Request ID for correlating with response
        RequestID: data Base_Types::Integer_64;
        --Location from which to calculate the routes
        StartLocation: data CMASI::Location3D.i;
        --The radius of the area of concern
        Radius: data Base_Types::Float_32;
end EgressRouteRequest.i;

data EgressRouteResponse
end EgressRouteResponse;

--Egress route response: returns egress routes (nearby intersections)
--from a point
	data implementation EgressRouteResponse.i
    subcomponents
        --Response ID matching ID from request ({@link EgressRouteRequest})
        ResponseID: data Base_Types::Integer_64;
        --The route locations
        NodeLocations: data CMASI::Location3D.i {Data_Model::Data_Representation => Array;};
        --The orientations
        Headings: data Base_Types::Float_32 {Data_Model::Data_Representation => Array;};
end EgressRouteResponse.i;


end ROUTE;