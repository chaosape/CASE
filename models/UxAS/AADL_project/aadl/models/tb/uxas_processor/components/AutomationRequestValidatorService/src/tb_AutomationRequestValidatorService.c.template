/**************************************************************************
  Copyright (c) 2013-2016 Rockwell Collins and the University of
  Minnesota. Developed with the sponsorship of the Defense Advanced
  Research Projects Agency (DARPA).

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this data, including any software or models
  in source or binary form, as well as any drawings,
  specifications, and documentation (collectively "the Data"), to
  deal in the Data without restriction, including without
  limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Data, and to
  permit persons to whom the Data is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Data.

  THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS, SPONSORS,
  DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE
  DATA.
 **************************************************************************/

/**************************************************************************

  ***AUTOGENERATED CODE: DO NOT MODIFY***

This C file contains the implementations of the AADL primitives
used by user-level declarations for thread AutomationRequestValidatorService.

The user code runs in terms of "dispatchers", which cause
dispatch user-level handlers to execute.  These handlers can
communicate using the standard AADL primitives, which are mapped
to C functions.

The send/receive handlers are not thread safe in CAmkES; it is
assumed that this is handled by the CAmkES sequentialized access
to the dispatch handler.  There is only one dispatch interface
for the component containing all of the dispatch points.

They are thread safe for eChronos.

The read/write handlers are thread safe because the writer comes
through a dispatch interface but the reader is "local" on a dispatch
interface and so contention may occur.

 **************************************************************************/

#include "tb_AutomationRequestValidatorService.h"
#include <string.h>
#include <camkes.h>

/************************************************************************
 *  tb_ServiceStatus_out_enqueue:
 * Invoked from user code in the local thread.
 *
 * This is the function invoked by the local thread to make a
 * call to write to a remote data port.
 *
 * XXX: When simulating fan out, the caller of this function will only 
 * receive a positive response when all enqueues are successful. When a
 * negative response is received it only indicates that at least one
 * enqueue attempt failed.
 *
 ************************************************************************/
bool tb_ServiceStatus_out_enqueue
(const CMASI__ServiceStatus_i * tb_ServiceStatus_out) {
    bool tb_result = true ; 
    return tb_result;
}
/************************************************************************
 *  tb_ImpactAutomationResponse_out_enqueue:
 * Invoked from user code in the local thread.
 *
 * This is the function invoked by the local thread to make a
 * call to write to a remote data port.
 *
 * XXX: When simulating fan out, the caller of this function will only 
 * receive a positive response when all enqueues are successful. When a
 * negative response is received it only indicates that at least one
 * enqueue attempt failed.
 *
 ************************************************************************/
bool tb_ImpactAutomationResponse_out_enqueue
(const IMPACT__ImpactAutomationResponse_i * tb_ImpactAutomationResponse_out) {
    bool tb_result = true ; 

    tb_result &= tb_ImpactAutomationResponse_out0_enqueue((IMPACT__ImpactAutomationResponse_i *)tb_ImpactAutomationResponse_out);

    return tb_result;
}
/************************************************************************
 *  tb_AutomationResponse_out_enqueue:
 * Invoked from user code in the local thread.
 *
 * This is the function invoked by the local thread to make a
 * call to write to a remote data port.
 *
 * XXX: When simulating fan out, the caller of this function will only 
 * receive a positive response when all enqueues are successful. When a
 * negative response is received it only indicates that at least one
 * enqueue attempt failed.
 *
 ************************************************************************/
bool tb_AutomationResponse_out_enqueue
(const CMASI__AutomationResponse_i * tb_AutomationResponse_out) {
    bool tb_result = true ; 

    tb_result &= tb_AutomationResponse_out0_enqueue((CMASI__AutomationResponse_i *)tb_AutomationResponse_out);

    tb_result &= tb_AutomationResponse_out1_enqueue((CMASI__AutomationResponse_i *)tb_AutomationResponse_out);

    tb_result &= tb_AutomationResponse_out2_enqueue((CMASI__AutomationResponse_i *)tb_AutomationResponse_out);

    tb_result &= tb_AutomationResponse_out3_enqueue((CMASI__AutomationResponse_i *)tb_AutomationResponse_out);

    tb_result &= tb_AutomationResponse_out4_enqueue((CMASI__AutomationResponse_i *)tb_AutomationResponse_out);

    return tb_result;
}
/************************************************************************
 *  tb_TaskAutomationResponse_out_enqueue:
 * Invoked from user code in the local thread.
 *
 * This is the function invoked by the local thread to make a
 * call to write to a remote data port.
 *
 * XXX: When simulating fan out, the caller of this function will only 
 * receive a positive response when all enqueues are successful. When a
 * negative response is received it only indicates that at least one
 * enqueue attempt failed.
 *
 ************************************************************************/
bool tb_TaskAutomationResponse_out_enqueue
(const UXTASK__TaskAutomationResponse_i * tb_TaskAutomationResponse_out) {
    bool tb_result = true ; 
    return tb_result;
}
/************************************************************************
 *  tb_UniqueAutomationRequest_out_enqueue:
 * Invoked from user code in the local thread.
 *
 * This is the function invoked by the local thread to make a
 * call to write to a remote data port.
 *
 * XXX: When simulating fan out, the caller of this function will only 
 * receive a positive response when all enqueues are successful. When a
 * negative response is received it only indicates that at least one
 * enqueue attempt failed.
 *
 ************************************************************************/
bool tb_UniqueAutomationRequest_out_enqueue
(const UXTASK__UniqueAutomationRequest_i * tb_UniqueAutomationRequest_out) {
    bool tb_result = true ; 

    tb_result &= tb_UniqueAutomationRequest_out0_enqueue((UXTASK__UniqueAutomationRequest_i *)tb_UniqueAutomationRequest_out);

    tb_result &= tb_UniqueAutomationRequest_out1_enqueue((UXTASK__UniqueAutomationRequest_i *)tb_UniqueAutomationRequest_out);

    tb_result &= tb_UniqueAutomationRequest_out2_enqueue((UXTASK__UniqueAutomationRequest_i *)tb_UniqueAutomationRequest_out);

    tb_result &= tb_UniqueAutomationRequest_out3_enqueue((UXTASK__UniqueAutomationRequest_i *)tb_UniqueAutomationRequest_out);

    tb_result &= tb_UniqueAutomationRequest_out4_enqueue((UXTASK__UniqueAutomationRequest_i *)tb_UniqueAutomationRequest_out);

    return tb_result;
}



void pre_init(void) {

    // Pre-initialization statements for tb_TaskInitialized_in
    // Pre-initialization statements for tb_KeepOutZone_in
    // Pre-initialization statements for tb_SurfaceVehicleConfiguration_in
    // Pre-initialization statements for tb_AirVehicleConfiguration_in
    // Pre-initialization statements for tb_AreaOfInterest_in
    // Pre-initialization statements for tb_AutomationRequest_in
    // Pre-initialization statements for tb_GroundVehicleState_in
    // Pre-initialization statements for tb_TaskAutomationRequest_in
    // Pre-initialization statements for tb_UniqueAutomationResponse_in
    // Pre-initialization statements for tb_PointOfInterest_in
    // Pre-initialization statements for tb_RemoveTasks_in
    // Pre-initialization statements for tb_Task_in
    // Pre-initialization statements for tb_OperatingRegion_in
    // Pre-initialization statements for tb_GroundVehicleConfiguration_in
    // Pre-initialization statements for tb_AirVehicleState_in
    // Pre-initialization statements for tb_SurfaceVehicleState_in
    // Pre-initialization statements for tb_KeepInZone_in
    // Pre-initialization statements for tb_ImpactAutomationRequest_in
    // Pre-initialization statements for tb_LineOfInterest_in
    // Pre-initialization statements for tb_ServiceStatus_in
    // Pre-initialization statements for tb_SearchTask_in
    // Pre-initialization statements for tb_AreaSearchTask_in
    // Pre-initialization statements for tb_LineSearchTask_in
    // Pre-initialization statements for tb_LoiterTask_in
    // Pre-initialization statements for tb_MustFlyTask_in
    // Pre-initialization statements for tb_PointSearchTask_in

}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_TaskInitialized_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_TaskInitialized_in(const UXTASK__TaskInitialized_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_KeepOutZone_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_KeepOutZone_in(const CMASI__KeepOutZone_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_SurfaceVehicleConfiguration_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_SurfaceVehicleConfiguration_in(const IMPACT__SurfaceVehicleConfiguration_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_AirVehicleConfiguration_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_AirVehicleConfiguration_in(const CMASI__AirVehicleConfiguration_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_AreaOfInterest_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_AreaOfInterest_in(const IMPACT__AreaOfInterest_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_AutomationRequest_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_AutomationRequest_in(const CMASI__AutomationRequest_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_GroundVehicleState_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_GroundVehicleState_in(const IMPACT__GroundVehicleState_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_TaskAutomationRequest_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_TaskAutomationRequest_in(const UXTASK__TaskAutomationRequest_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_UniqueAutomationResponse_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_UniqueAutomationResponse_in(const UXTASK__UniqueAutomationResponse_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_PointOfInterest_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_PointOfInterest_in(const IMPACT__PointOfInterest_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_RemoveTasks_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_RemoveTasks_in(const CMASI__RemoveTasks_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_Task_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_Task_in(const CMASI__Task_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_OperatingRegion_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_OperatingRegion_in(const CMASI__OperatingRegion_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_GroundVehicleConfiguration_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_GroundVehicleConfiguration_in(const IMPACT__GroundVehicleConfiguration_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_AirVehicleState_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_AirVehicleState_in(const CMASI__AirVehicleState_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_SurfaceVehicleState_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_SurfaceVehicleState_in(const IMPACT__SurfaceVehicleState_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_KeepInZone_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_KeepInZone_in(const CMASI__KeepInZone_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_ImpactAutomationRequest_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_ImpactAutomationRequest_in(const IMPACT__ImpactAutomationRequest_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_LineOfInterest_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_LineOfInterest_in(const IMPACT__LineOfInterest_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_ServiceStatus_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_ServiceStatus_in(const CMASI__ServiceStatus_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_SearchTask_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_SearchTask_in(const CMASI__SearchTask_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_AreaSearchTask_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_AreaSearchTask_in(const CMASI__AreaSearchTask_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_LineSearchTask_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_LineSearchTask_in(const CMASI__LineSearchTask_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_LoiterTask_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_LoiterTask_in(const CMASI__LoiterTask_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_MustFlyTask_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_MustFlyTask_in(const CMASI__MustFlyTask_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_AutomationRequestValidatorService_PointSearchTask_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_AutomationRequestValidatorService_PointSearchTask_in(const CMASI__PointSearchTask_i * in_arg) {
}


////////////////////////////////////////////////////////////////////////////
//
// NOTE: External thread, so we assume the run function is externally declared.
//
////////////////////////////////////////////////////////////////////////////

