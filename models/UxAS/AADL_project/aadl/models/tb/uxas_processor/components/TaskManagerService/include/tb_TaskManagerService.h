#ifndef __TB_AADL_TaskManagerService_types__H
#define __TB_AADL_TaskManagerService_types__H

#include <tb_uxas_processor_types.h>

/**************************************************************************
  Copyright (c) 2013-2016 Rockwell Collins and the University of
  Minnesota. Developed with the sponsorship of the Defense Advanced
  Research Projects Agency (DARPA).

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this data, including any software or models
  in source or binary form, as well as any drawings,
  specifications, and documentation (collectively "the Data"), to
  deal in the Data without restriction, including without
  limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Data, and to
  permit persons to whom the Data is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Data.

  THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS, SPONSORS,
  DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE
  DATA.
 **************************************************************************/

/**************************************************************************

  ***AUTOGENERATED CODE: DO NOT MODIFY***

This header section contains the AADL gluecode interfaces used by the
client for the thread implementations.

 **************************************************************************/


// reader prototype for tb_MissionCommand_in
bool tb_MissionCommand_in_dequeue(CMASI__MissionCommand_i * tb_MissionCommand_in);
 // reader prototype for tb_GroundVehicleConfiguration_in
bool tb_GroundVehicleConfiguration_in_dequeue(IMPACT__GroundVehicleConfiguration_i * tb_GroundVehicleConfiguration_in);
 // reader prototype for tb_EntityConfiguration_in
bool tb_EntityConfiguration_in_dequeue(CMASI__EntityConfiguration_i * tb_EntityConfiguration_in);
 // reader prototype for tb_SurfaceVehicleConfiguration_in
bool tb_SurfaceVehicleConfiguration_in_dequeue(IMPACT__SurfaceVehicleConfiguration_i * tb_SurfaceVehicleConfiguration_in);
 // reader prototype for tb_AirVehicleConfiguration_in
bool tb_AirVehicleConfiguration_in_dequeue(CMASI__AirVehicleConfiguration_i * tb_AirVehicleConfiguration_in);
 // reader prototype for tb_AreaOfInterest_in
bool tb_AreaOfInterest_in_dequeue(IMPACT__AreaOfInterest_i * tb_AreaOfInterest_in);
 // reader prototype for tb_FollowPathCommand_in
bool tb_FollowPathCommand_in_dequeue(CMASI__FollowPathCommand_i * tb_FollowPathCommand_in);
 // reader prototype for tb_GroundVehicleState_in
bool tb_GroundVehicleState_in_dequeue(IMPACT__GroundVehicleState_i * tb_GroundVehicleState_in);
 // reader prototype for tb_EntityState_in
bool tb_EntityState_in_dequeue(CMASI__EntityState_i * tb_EntityState_in);
 // reader prototype for tb_PointOfInterest_in
bool tb_PointOfInterest_in_dequeue(IMPACT__PointOfInterest_i * tb_PointOfInterest_in);
 // reader prototype for tb_RemoveTasks_in
bool tb_RemoveTasks_in_dequeue(CMASI__RemoveTasks_i * tb_RemoveTasks_in);
 // reader prototype for tb_AutomationResponse_in
bool tb_AutomationResponse_in_dequeue(CMASI__AutomationResponse_i * tb_AutomationResponse_in);
 // reader prototype for tb_Task_in
bool tb_Task_in_dequeue(CMASI__Task_i * tb_Task_in);
 // reader prototype for tb_AirVehicleState_in
bool tb_AirVehicleState_in_dequeue(CMASI__AirVehicleState_i * tb_AirVehicleState_in);
 // reader prototype for tb_SurfaceVehicleState_in
bool tb_SurfaceVehicleState_in_dequeue(IMPACT__SurfaceVehicleState_i * tb_SurfaceVehicleState_in);
 // reader prototype for tb_LineOfInterest_in
bool tb_LineOfInterest_in_dequeue(IMPACT__LineOfInterest_i * tb_LineOfInterest_in);
 bool tb_UniqueAutomationRequest_out_enqueue(const UXTASK__UniqueAutomationRequest_i * tb_UniqueAutomationRequest_out);
 bool tb_KillService_out_enqueue(const UXNATIVE__KillService_i * tb_KillService_out);
 bool tb_CreateNewService_out_enqueue(const UXNATIVE__CreateNewService_i * tb_CreateNewService_out);
 

//////////////////////////////////////////////////////////////////////////
//
// Note: thread is declared EXTERNAL; user should provide run() function.
//
//////////////////////////////////////////////////////////////////////////

#endif // __TB_AADL_TaskManagerService_types__H
