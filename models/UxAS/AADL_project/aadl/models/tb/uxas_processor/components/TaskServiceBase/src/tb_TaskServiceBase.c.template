/**************************************************************************
  Copyright (c) 2013-2016 Rockwell Collins and the University of
  Minnesota. Developed with the sponsorship of the Defense Advanced
  Research Projects Agency (DARPA).

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this data, including any software or models
  in source or binary form, as well as any drawings,
  specifications, and documentation (collectively "the Data"), to
  deal in the Data without restriction, including without
  limitation the rights to use, copy, modify, merge, publish,
  distribute, sublicense, and/or sell copies of the Data, and to
  permit persons to whom the Data is furnished to do so, subject to
  the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Data.

  THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS, SPONSORS,
  DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE
  DATA.
 **************************************************************************/

/**************************************************************************

  ***AUTOGENERATED CODE: DO NOT MODIFY***

This C file contains the implementations of the AADL primitives
used by user-level declarations for thread TaskServiceBase.

The user code runs in terms of "dispatchers", which cause
dispatch user-level handlers to execute.  These handlers can
communicate using the standard AADL primitives, which are mapped
to C functions.

The send/receive handlers are not thread safe in CAmkES; it is
assumed that this is handled by the CAmkES sequentialized access
to the dispatch handler.  There is only one dispatch interface
for the component containing all of the dispatch points.

They are thread safe for eChronos.

The read/write handlers are thread safe because the writer comes
through a dispatch interface but the reader is "local" on a dispatch
interface and so contention may occur.

 **************************************************************************/

#include "tb_TaskServiceBase.h"
#include <string.h>
#include <camkes.h>

/************************************************************************
 *  tb_TaskInitialized_out_enqueue:
 * Invoked from user code in the local thread.
 *
 * This is the function invoked by the local thread to make a
 * call to write to a remote data port.
 *
 * XXX: When simulating fan out, the caller of this function will only 
 * receive a positive response when all enqueues are successful. When a
 * negative response is received it only indicates that at least one
 * enqueue attempt failed.
 *
 ************************************************************************/
bool tb_TaskInitialized_out_enqueue
(const UXTASK__TaskInitialized_i * tb_TaskInitialized_out) {
    bool tb_result = true ; 

    tb_result &= tb_TaskInitialized_out0_enqueue((UXTASK__TaskInitialized_i *)tb_TaskInitialized_out);

    return tb_result;
}
/************************************************************************
 *  tb_TaskActive_out_enqueue:
 * Invoked from user code in the local thread.
 *
 * This is the function invoked by the local thread to make a
 * call to write to a remote data port.
 *
 * XXX: When simulating fan out, the caller of this function will only 
 * receive a positive response when all enqueues are successful. When a
 * negative response is received it only indicates that at least one
 * enqueue attempt failed.
 *
 ************************************************************************/
bool tb_TaskActive_out_enqueue
(const UXTASK__TaskActive_i * tb_TaskActive_out) {
    bool tb_result = true ; 
    return tb_result;
}
/************************************************************************
 *  tb_TaskImplementationResponse_out_enqueue:
 * Invoked from user code in the local thread.
 *
 * This is the function invoked by the local thread to make a
 * call to write to a remote data port.
 *
 * XXX: When simulating fan out, the caller of this function will only 
 * receive a positive response when all enqueues are successful. When a
 * negative response is received it only indicates that at least one
 * enqueue attempt failed.
 *
 ************************************************************************/
bool tb_TaskImplementationResponse_out_enqueue
(const UXTASK__TaskImplementationResponse_i * tb_TaskImplementationResponse_out) {
    bool tb_result = true ; 

    tb_result &= tb_TaskImplementationResponse_out0_enqueue((UXTASK__TaskImplementationResponse_i *)tb_TaskImplementationResponse_out);

    return tb_result;
}
/************************************************************************
 *  tb_TaskComplete_out_enqueue:
 * Invoked from user code in the local thread.
 *
 * This is the function invoked by the local thread to make a
 * call to write to a remote data port.
 *
 * XXX: When simulating fan out, the caller of this function will only 
 * receive a positive response when all enqueues are successful. When a
 * negative response is received it only indicates that at least one
 * enqueue attempt failed.
 *
 ************************************************************************/
bool tb_TaskComplete_out_enqueue
(const UXTASK__TaskComplete_i * tb_TaskComplete_out) {
    bool tb_result = true ; 
    return tb_result;
}
/************************************************************************
 *  tb_TaskPlanOptions_out_enqueue:
 * Invoked from user code in the local thread.
 *
 * This is the function invoked by the local thread to make a
 * call to write to a remote data port.
 *
 * XXX: When simulating fan out, the caller of this function will only 
 * receive a positive response when all enqueues are successful. When a
 * negative response is received it only indicates that at least one
 * enqueue attempt failed.
 *
 ************************************************************************/
bool tb_TaskPlanOptions_out_enqueue
(const UXTASK__TaskPlanOptions_i * tb_TaskPlanOptions_out) {
    bool tb_result = true ; 

    tb_result &= tb_TaskPlanOptions_out0_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out1_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out2_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out3_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out4_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out5_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out6_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out7_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out8_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out9_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out10_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out11_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out12_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out13_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out14_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out15_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out16_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out17_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out18_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out19_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out20_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out21_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out22_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    tb_result &= tb_TaskPlanOptions_out23_enqueue((UXTASK__TaskPlanOptions_i *)tb_TaskPlanOptions_out);

    return tb_result;
}
/************************************************************************
 *  tb_SensorFootprintRequests_out_enqueue:
 * Invoked from user code in the local thread.
 *
 * This is the function invoked by the local thread to make a
 * call to write to a remote data port.
 *
 * XXX: When simulating fan out, the caller of this function will only 
 * receive a positive response when all enqueues are successful. When a
 * negative response is received it only indicates that at least one
 * enqueue attempt failed.
 *
 ************************************************************************/
bool tb_SensorFootprintRequests_out_enqueue
(const UXTASK__SensorFootprintRequests_i * tb_SensorFootprintRequests_out) {
    bool tb_result = true ; 
    return tb_result;
}
/************************************************************************
 *  tb_VehicleActionCommand_out_enqueue:
 * Invoked from user code in the local thread.
 *
 * This is the function invoked by the local thread to make a
 * call to write to a remote data port.
 *
 * XXX: When simulating fan out, the caller of this function will only 
 * receive a positive response when all enqueues are successful. When a
 * negative response is received it only indicates that at least one
 * enqueue attempt failed.
 *
 ************************************************************************/
bool tb_VehicleActionCommand_out_enqueue
(const CMASI__VehicleActionCommand_i * tb_VehicleActionCommand_out) {
    bool tb_result = true ; 
    return tb_result;
}
/************************************************************************
 *  tb_RouteRequest_out_enqueue:
 * Invoked from user code in the local thread.
 *
 * This is the function invoked by the local thread to make a
 * call to write to a remote data port.
 *
 * XXX: When simulating fan out, the caller of this function will only 
 * receive a positive response when all enqueues are successful. When a
 * negative response is received it only indicates that at least one
 * enqueue attempt failed.
 *
 ************************************************************************/
bool tb_RouteRequest_out_enqueue
(const ROUTE__RouteRequest_i * tb_RouteRequest_out) {
    bool tb_result = true ; 

    tb_result &= tb_RouteRequest_out0_enqueue((ROUTE__RouteRequest_i *)tb_RouteRequest_out);

    tb_result &= tb_RouteRequest_out1_enqueue((ROUTE__RouteRequest_i *)tb_RouteRequest_out);

    tb_result &= tb_RouteRequest_out2_enqueue((ROUTE__RouteRequest_i *)tb_RouteRequest_out);

    tb_result &= tb_RouteRequest_out3_enqueue((ROUTE__RouteRequest_i *)tb_RouteRequest_out);

    tb_result &= tb_RouteRequest_out4_enqueue((ROUTE__RouteRequest_i *)tb_RouteRequest_out);

    tb_result &= tb_RouteRequest_out5_enqueue((ROUTE__RouteRequest_i *)tb_RouteRequest_out);

    tb_result &= tb_RouteRequest_out6_enqueue((ROUTE__RouteRequest_i *)tb_RouteRequest_out);

    tb_result &= tb_RouteRequest_out7_enqueue((ROUTE__RouteRequest_i *)tb_RouteRequest_out);

    tb_result &= tb_RouteRequest_out8_enqueue((ROUTE__RouteRequest_i *)tb_RouteRequest_out);

    tb_result &= tb_RouteRequest_out9_enqueue((ROUTE__RouteRequest_i *)tb_RouteRequest_out);

    tb_result &= tb_RouteRequest_out10_enqueue((ROUTE__RouteRequest_i *)tb_RouteRequest_out);

    tb_result &= tb_RouteRequest_out11_enqueue((ROUTE__RouteRequest_i *)tb_RouteRequest_out);

    return tb_result;
}



void pre_init(void) {

    // Pre-initialization statements for tb_CreateNewService_in
    // Pre-initialization statements for tb_GroundVehicleConfiguration_in
    // Pre-initialization statements for tb_EntityConfiguration_in
    // Pre-initialization statements for tb_SurfaceVehicleConfiguration_in
    // Pre-initialization statements for tb_AirVehicleConfiguration_in
    // Pre-initialization statements for tb_EntityState_in
    // Pre-initialization statements for tb_TaskImplementationRequest_in
    // Pre-initialization statements for tb_GroundVehicleState_in
    // Pre-initialization statements for tb_UniqueAutomationRequest_in
    // Pre-initialization statements for tb_UniqueAutomationResponse_in
    // Pre-initialization statements for tb_SurfaceVehicleState_in
    // Pre-initialization statements for tb_AirVehicleState_in
    // Pre-initialization statements for tb_SensorFootprintResponse_in
    // Pre-initialization statements for tb_RouteResponse_in

}

/************************************************************************
 *  tb_entrypoint_tb_TaskServiceBase_CreateNewService_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_TaskServiceBase_CreateNewService_in(const UXNATIVE__CreateNewService_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_TaskServiceBase_GroundVehicleConfiguration_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_TaskServiceBase_GroundVehicleConfiguration_in(const IMPACT__GroundVehicleConfiguration_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_TaskServiceBase_EntityConfiguration_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_TaskServiceBase_EntityConfiguration_in(const CMASI__EntityConfiguration_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_TaskServiceBase_SurfaceVehicleConfiguration_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_TaskServiceBase_SurfaceVehicleConfiguration_in(const IMPACT__SurfaceVehicleConfiguration_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_TaskServiceBase_AirVehicleConfiguration_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_TaskServiceBase_AirVehicleConfiguration_in(const CMASI__AirVehicleConfiguration_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_TaskServiceBase_EntityState_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_TaskServiceBase_EntityState_in(const CMASI__EntityState_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_TaskServiceBase_TaskImplementationRequest_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_TaskServiceBase_TaskImplementationRequest_in(const UXTASK__TaskImplementationRequest_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_TaskServiceBase_GroundVehicleState_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_TaskServiceBase_GroundVehicleState_in(const IMPACT__GroundVehicleState_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_TaskServiceBase_UniqueAutomationRequest_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_TaskServiceBase_UniqueAutomationRequest_in(const UXTASK__UniqueAutomationRequest_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_TaskServiceBase_UniqueAutomationResponse_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_TaskServiceBase_UniqueAutomationResponse_in(const UXTASK__UniqueAutomationResponse_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_TaskServiceBase_SurfaceVehicleState_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_TaskServiceBase_SurfaceVehicleState_in(const IMPACT__SurfaceVehicleState_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_TaskServiceBase_AirVehicleState_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_TaskServiceBase_AirVehicleState_in(const CMASI__AirVehicleState_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_TaskServiceBase_SensorFootprintResponse_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_TaskServiceBase_SensorFootprintResponse_in(const UXTASK__SensorFootprintResponse_i * in_arg) {
}

/************************************************************************
 *  tb_entrypoint_tb_TaskServiceBase_RouteResponse_in:
 *
 * This is the function invoked by an active thread dispatcher to
 * call to a user-defined entrypoint function.  It sets up the dispatch
 * context for the user-defined entrypoint, then calls it.
 *
 ************************************************************************/
void tb_entrypoint_tb_TaskServiceBase_RouteResponse_in(const ROUTE__RouteResponse_i * in_arg) {
}


////////////////////////////////////////////////////////////////////////////
//
// NOTE: External thread, so we assume the run function is externally declared.
//
////////////////////////////////////////////////////////////////////////////

