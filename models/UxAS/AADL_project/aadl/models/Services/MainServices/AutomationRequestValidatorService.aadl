package AutomationRequestValidatorService_Pkg
public
    -- Include DataTypes
    with CMASI;
    with UXTASK;
    with IMPACT;

    -- Includes
	with ServiceBase_Pkg;
    
  with TB_SYS;
  
    -- This is a "dummy" top-level system. We use it so that we can check 
	--  "properties" of our component contract.
	process top_level
		features
			AutomationRequest_in : in event data port cmasi::AutomationRequest.i;
			UniqueAutomationResponse_in : in event data port uxtask::UniqueAutomationResponse.i;
		annex agree {**
			eq event_AutomationRequest_in : bool = event(AutomationRequest_in);
			assume "AutomationRequest_in is assumed to occur sporadically with an inter arrival time no sooner than 3ms.": 
				condition event_AutomationRequest_in occurs sporadic with IAT 0.003;
				
			eq event_UniqueAutomationResponse_in : bool = event(UniqueAutomationResponse_in);
			assume "UniqueAutomationResponse_in is assumed to occur sporadically with an inter arrival time no sooner than 2ms" :
				condition event_UniqueAutomationResponse_in occurs sporadic with IAT 0.002;
			
		**};
	end top_level;
	
	process implementation top_level.Impl
		subcomponents
			sub : thread AutomationRequestValidatorService; 
		connections
			conn0 : port UniqueAutomationResponse_in -> sub.UniqueAutomationResponse_in;
			conn1 : port AutomationRequest_in -> sub.AutomationRequest_in;
	end top_level.Impl;	
	
    
    thread AutomationRequestValidatorService extends ServiceBase_Pkg::ServiceBase
        features
            TaskInitialized_in: in event data port uxtask::TaskInitialized.i;
            KeepOutZone_in: in event data port cmasi::KeepOutZone.i;
            SurfaceVehicleConfiguration_in: in event data port impact::SurfaceVehicleConfiguration.i;
            AirVehicleConfiguration_in: in event data port cmasi::AirVehicleConfiguration.i;
            AreaOfInterest_in: in event data port impact::AreaOfInterest.i;
            AutomationRequest_in: in event data port cmasi::AutomationRequest.i;
            GroundVehicleState_in: in event data port impact::GroundVehicleState.i;
            TaskAutomationRequest_in: in event data port uxtask::TaskAutomationRequest.i;
            UniqueAutomationResponse_in: in event data port uxtask::UniqueAutomationResponse.i;
            PointOfInterest_in: in event data port impact::PointOfInterest.i;
            RemoveTasks_in: in event data port cmasi::RemoveTasks.i;
            Task_in: in event data port cmasi::Task.i;
            OperatingRegion_in: in event data port cmasi::OperatingRegion.i;
            GroundVehicleConfiguration_in: in event data port impact::GroundVehicleConfiguration.i;
            AirVehicleState_in: in event data port cmasi::AirVehicleState.i;
            SurfaceVehicleState_in: in event data port impact::SurfaceVehicleState.i;
            KeepInZone_in: in event data port cmasi::KeepInZone.i;
            ImpactAutomationRequest_in: in event data port impact::ImpactAutomationRequest.i;
            LineOfInterest_in: in event data port impact::LineOfInterest.i;
                    --note that the code does not actually subscribe to "ServiceStatus" currently
            --TODO: derek suggests ServiceStatus_in is how error messages are indicated to the service, but we currently do not use it
            ServiceStatus_in: in event data port cmasi::ServiceStatus.i; 
                    --the source code subscribes to all descendants of task:
            SearchTask_in: in event data port cmasi::SearchTask.i;
            AreaSearchTask_in: in event data port cmasi::AreaSearchTask.i;
            LineSearchTask_in: in event data port cmasi::LineSearchTask.i;
            LoiterTask_in: in event data port cmasi::LoiterTask.i;
            MustFlyTask_in: in event data port cmasi::MustFlyTask.i;
            PointSearchTask_in: in event data port cmasi::PointSearchTask.i;
            ServiceStatus_out: out event data port cmasi::ServiceStatus.i;
            ImpactAutomationResponse_out: out event data port impact::ImpactAutomationResponse.i;
            AutomationResponse_out: out event data port cmasi::AutomationResponse.i;
            TaskAutomationResponse_out: out event data port uxtask::TaskAutomationResponse.i;
            UniqueAutomationRequest_out: out event data port uxtask::UniqueAutomationRequest.i;
        properties
            Dispatch_Protocol => Sporadic;
          TB_SYS::Is_External => true;
          Priority => 253;
          TB_SYS::Thread_Type => Active;
          Compute_Execution_Time => 10 us .. 100 us;              
    end AutomationRequestValidatorService;

    
end AutomationRequestValidatorService_Pkg;
