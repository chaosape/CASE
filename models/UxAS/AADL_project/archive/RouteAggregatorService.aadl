package RouteAggregatorService_Pkg
public
	with CMASI;
    with UXTASK;
    with IMPACT;
    with ROUTE;
    with UxAS_Node_Lib;
    with TB_SYS;
    
	-- This is a "dummy" top-level system. We use it so that we can check 
	--  "properties" of our component contract.
	process top_level
		annex agree {**
			guarantee "Placeholder guarantee to force AGREE to run" : true;
		**};
	end top_level;
	
	process implementation top_level.Impl
		subcomponents
			sub : thread RouteAggregatorService; 

		 
	end top_level.Impl;	
	
thread RouteAggregatorService
    features
        GroundVehicleConfiguration_in: in event data port impact::GroundVehicleConfiguration.i;
        SurfaceVehicleConfiguration_in: in event data port impact::SurfaceVehicleConfiguration.i;
        AirVehicleConfiguration_in: in event data port cmasi::AirVehicleConfiguration.i;
        RouteRequest_in: in event data port route::RouteRequest.i;
        GroundVehicleState_in: in event data port impact::GroundVehicleState.i;
        UniqueAutomationRequest_in: in event data port uxtask::UniqueAutomationRequest.i;
        RoutePlanResponse_in: in event data port route::RoutePlanResponse.i;
        SurfaceVehicleState_in: in event data port impact::SurfaceVehicleState.i;
        TaskPlanOptions_in: in event data port uxtask::TaskPlanOptions.i;
        AirVehicleState_in: in event data port cmasi::AirVehicleState.i;
        ServiceStatus_out: out event data port cmasi::ServiceStatus.i;
        RoutePlanRequest_out: out event data port route::RoutePlanRequest.i;
        AssignmentCostMatrix_out: out event data port uxtask::AssignmentCostMatrix.i;
        RouteResponse_out: out event data port route::RouteResponse.i;
         properties
            Dispatch_Protocol => Sporadic;
          TB_SYS::Is_External => true;
          Priority => 253;
          TB_SYS::Thread_Type => Active;
          Compute_Execution_Time => 10 us .. 100 us;    
end RouteAggregatorService;

end RouteAggregatorService_Pkg;